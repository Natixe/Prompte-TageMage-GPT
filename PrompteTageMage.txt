### **Création d'un formulaire HTML interactif pour le Tage Mage avec correction détaillée et design minimaliste**

Vous êtes un expert en préparation au Tage Mage, un test d’admission aux écoles de commerce. Votre mission est de concevoir un formulaire HTML interactif, complet et attrayant, pour évaluer les compétences des candidats dans les six catégories principales du Tage Mage :

1. **Calcul** : Proposer des problèmes mathématiques avancés, incluant des résolutions avec des tactiques claires telles que les identités remarquables, les produits en croix, ou les séries d'opérations.
2. **Conditions minimales** : Créer des énigmes de raisonnement logique nécessitant une analyse approfondie des conditions d'un problème.
3. **Expression** : Tester la compréhension du langage par l’analyse de textes complexes et des questions de synonymie, antonymie ou compréhension.
4. **Logique** : Concevoir des questions combinatoires, sur des suites logiques ou des arrangements spécifiques.
5. **Matrices** : Proposer des matrices à compléter, incluant des variations de modèles complexes.
6. **Compréhension** : Formuler des passages exigeants suivis de questions sur les inférences ou la synthèse.

Questions basées sur des annales Tage Mage : Proposer des questions tirées ou inspirées directement d'anciens tests Tage Mage pour offrir une expérience de préparation plus réaliste.

---

### **Détails de conception et fonctionnalités attendues :**

1. **Instructions pour les questions :**
   **Difficulté équilibrée :**
      - Intégrer un mélange de questions **intermédiaires**, **difficiles** et **très difficiles**, avec des annotations pour guider l’utilisateur sur leur complexité.
   **Authenticité et pertinence :**
      - Reproduire des formats et des mécanismes identiques aux tests officiels, par exemple des séries, des systèmes d’équations, ou des analyses combinatoires.
   **Réponses et corrections détaillées :**
      - Fournir 3 à 5 options de réponses avec une seule correcte.
      - Inclure une explication claire de la bonne réponse dans le code, masquée avant la soumission. 

2. **Structure du formulaire :**
   - Inclure **50 questions numérotées**, questions réparties en 6 catégories principales, comme décrit
   - Chaque question doit afficher son **catégorie** en en-tête, suivie de l’énoncé.
   - Proposer **3 à 5 options de réponse** pour chaque question, avec une seule réponse correcte.
   - Les explications des réponses correctes doivent être présentes dans le code source, mais masquées initialement.
   - Toutes les questions doivent être complètes, claires, sans éléments ambigus ni manquants.
   - Pour les questions basées sur les annales Tage Mage, inclure une référence à la source (année, numéro de test, etc.).

3. **Affichage des résultats :**
   - À la soumission, le formulaire :
     - Calculer et afficher le **score final**. (Chaque question vaut 1 point).
     - Liste les **questions incorrectes** avec :
       - La réponse choisie par l’utilisateur.
       - La **bonne réponse**.
       - Une explication **détaillée** de la bonne réponse.
     - Les réponses incorrectes de l’utilisateur apparaissent en rouge, les réponses correctes en vert.
     - Les corrections et explications s’affichent automatiquement sous chaque question incorrecte après la validation.
     - Les réponses restent cachées jusqu’à la fin du test, pour ne pas biaiser l’utilisateur.

4. **Direction artistique (UI/UX) :**
   - **Minimalisme et clarté** :
     - Les Question :  `#FFCB25`.
     - Fond : `#313338` (gris foncé).
     - Texte : `#FFFFFF` (blanc).
     - Utilisation d’une police moderne sans-serif comme `Roboto`, `Helvetica` ou `Arial`.
   - **Mise en page ergonomique** :
     - Espacements bien définis entre les sections et les questions.
     - Boutons et champs d’entrée épurés avec :
       - Coins légèrement arrondis.
       - Effets au survol (hover) : par exemple, éclaircir légèrement le bouton ou souligner les liens.
   - **Compatibilité mobile** :
     - Le design doit être **responsive**, adapté aux écrans d’ordinateurs, tablettes et smartphones.

5. **Fonctionnalités techniques :**
   - Implémenter en **HTML**, **CSS** et **JavaScript**.
   - Ajouter une logique JavaScript pour :
     - Valider le formulaire.
     - Calculer dynamiquement les scores.
     - Afficher les résultats et les corrections **sans rechargement de page**.
   - Chronomètre  :
     - Le chronomètre démarre dès le début du test et s’arrête à la soumission.
     - Le temps final doit être inclus dans les résultats et figurer dans l’export PDF.
   - Exportation PDF :
     - Permettre l’exportation du score, des corrections, et du temps final en PDF.

6. **Accessibilité :**
   - Veiller à ce que le formulaire soit accessible :
     - Support pour les **lecteurs d’écran**.
     - Contraste suffisant entre le texte et le fond.
   - Assurer une navigation fluide avec le clavier.

7. **Code modulaire et réutilisable :
   - Condenser tout le code dans un même fichier (HTML, CSS, JavaScript).

8. **Extension suggérée :**
   - Bouton de réinitialisation pour refaire le test, réinitialisant le score, les réponses, le chronomètre et les corrections.

---

### **Clause obligatoire :**
   - L'intelligence artificielle doit fournir une réponse complète et inclure les 50 questions spécifiées. Aucune question ni élément de conception ne doit être omis. Toutes les réponses correctes doivent être pleinement fournies pour respecter les spécifications du projet.

---

### **Livrable attendu :**
Un formulaire interactif, élégant et conforme aux standards du Tage Mage, offrant une expérience utilisateur optimale. La catégorie "Questions basées sur des annales Tage Mage" doit reproduire le plus fidèlement possible les conditions des tests historiques, avec corrections et scoring automatisés, chronomètre, et export PDF final.

Voici un exemple de formulaire HTML interactif pour le TageMage les question ne sont pas inclus :

```html,css,js
<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Test de Préparation au Tage Mage</title>
<style>
  body {
    font-family: "Roboto", "Helvetica", "Arial", sans-serif;
    background-color: #313338;
    color: #FFFFFF;
    margin: 0;
    padding: 0;
  }

  h1, h2, h3 {
    color: #FFCB25;
  }

  h1 {
    text-align: center;
    padding: 20px 0;
  }

  .container {
    max-width: 1100px;
    margin: auto;
    padding: 20px;
  }

  .instructions {
    margin-bottom: 20px;
    line-height: 1.5;
  }

  .question-block {
    margin-bottom: 30px;
    padding: 20px;
    background: #3B3D42;
    border-radius: 5px;
  }

  .question-block h2 {
    margin-top: 0;
  }

  .question-block p {
    margin: 10px 0;
  }

  .options label {
    display: block;
    padding: 5px 0;
    cursor: pointer;
  }

  .options input[type="radio"] {
    margin-right: 10px;
  }

  .submit-btn, .reset-btn, .pdf-btn {
    background-color: #FFCB25;
    color: #313338;
    border: none;
    padding: 10px 20px;
    margin: 20px 10px 0 0;
    border-radius: 5px;
    cursor: pointer;
  }

  .submit-btn:hover, .reset-btn:hover, .pdf-btn:hover {
    background-color: #f5be20;
  }

  .result-block {
    margin-top: 40px;
    background: #3B3D42;
    padding: 20px;
    border-radius: 5px;
  }

  .incorrect {
    color: #FF5252;
  }

  .correct {
    color: #4CAF50;
  }

  .explanation {
    margin-top: 10px;
    padding: 10px;
    background: #2D2F33;
    border-radius: 5px;
  }

  .explanation strong {
    color: #FFCB25;
  }

  .hidden {
    display: none;
  }

  /* Responsive */
  @media screen and (max-width: 600px) {
    .submit-btn, .reset-btn, .pdf-btn {
      width: 100%;
      margin-bottom: 10px;
    }
  }
</style>
</head>
<body>

<h1>Test de Préparation au Tage Mage</h1>
<div class="container">
  <div class="instructions">
    <p>Bienvenue sur ce test de préparation au Tage Mage. Vous trouverez 50 questions réparties en 6 catégories : Calcul, Conditions minimales, Expression, Logique, Matrices, et Compréhension. Le niveau de difficulté varie (intermédiaire, difficile, très difficile). Les questions sont inspirées des annales officielles du Tage Mage. Prenez le temps de lire les énoncés et sélectionnez la bonne réponse. Un chronomètre démarre dès le début du test. À la fin, vous pourrez soumettre vos réponses, consulter vos corrections détaillées, votre score, votre temps écoulé et exporter le résultat en PDF.</p>
    <p>Bon courage !</p>
  </div>

  <form id="testForm">
    
    <!-- ========================================= -->
    <!--                CALCUL (9 questions)       -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--          CONDITIONS MINIMALES (8 q)       -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--               EXPRESSION (8 q)            -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--               LOGIQUE (8 q)               -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--               MATRICES (8 q)              -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--            COMPRÉHENSION (9 q)            -->
    <!-- ========================================= -->

  </form>
</div>

<script>
  // Start timer
  let startTime = Date.now();
  let timerInterval = setInterval(() => {
    let elapsedSeconds = Math.floor((Date.now()-startTime)/1000);
  },1000);

  // Correct answers (index-based per question)
  // We'll store correct options as the value index chosen:
  // For questions with confusion, we pick the chosen "correct" as per explanations.
  // Q1 confusion: we choose "2" for demonstration
  const correctAnswers = {
    q1: "2",  q2: "1",  q3: "3",  q4: "4",  q5: "2",  q6: "1",  q7: "1",  q8: "2",  q9: "1",
    q10:"3", q11:"2", q12:"2", q13:"3", q14:"2", q15:"1", q16:"2", q17:"1",
    q18:"2", q19:"2", q20:"1", q21:"2", q22:"1", q23:"1", q24:"1", q25:"2",
    q26:"2", q27:"1", q28:"2", q29:"1", q30:"1", q31:"2", q32:"2", q33:"1",
    q34:"1", q35:"2", q36:"1", q37:"1", q38:"1", q39:"1", q40:"2", q41:"2",
    q42:"2", q43:"2", q44:"2", q45:"2", q46:"2", q47:"2", q48:"2", q49:"2", q50:"2"
  };

  function submitTest() {
    clearInterval(timerInterval);
    const form = document.getElementById('testForm');
    const resultBlock = document.getElementById('resultBlock');
    const correctionsDiv = document.getElementById('corrections');
    correctionsDiv.innerHTML = '';
    let score=0;

    // Calculate elapsed time
    let endTime=Date.now();
    let elapsedSeconds=Math.floor((endTime - startTime)/1000);
    document.getElementById('elapsedTime').textContent=elapsedSeconds;

    // Get all question-blocks
    const questionBlocks = document.querySelectorAll('.question-block');
    questionBlocks.forEach((block)=>{
      let qNum = block.getAttribute('data-question');
      let radios = block.querySelectorAll('input[type="radio"]');
      let qName = 'q'+qNum;
      let userAnswer=null;
      radios.forEach(r=>{
        if(r.checked) userAnswer=r.value;
      });

      let correct= correctAnswers[qName];
      if(userAnswer===correct) {
        score++;
        // Mark correct if needed
        // We show no explanation if correct
      } else {
        // Incorrect, show explanation and highlight
        let chosenLabel = null;
        let correctLabel = null;
        radios.forEach(r=>{
          if(r.value===userAnswer) chosenLabel=r.parentNode.innerText.trim();
          if(r.value===correct) correctLabel=r.parentNode.innerText.trim();
        });
        
        // Show explanation
        let explanation = block.querySelector('.explanation');
        if(explanation) {
          explanation.classList.remove('hidden');
        }

        // Add correction details:
        let category=block.getAttribute('data-category');
        let correctionHTML = `
          <div style="margin-top:20px;">
            <h3 class="incorrect">Question ${qNum} (${category})</h3>
            <p><strong>Votre réponse :</strong> <span class="incorrect">${chosenLabel ? chosenLabel : "Non répondue"}</span></p>
            <p><strong>Bonne réponse :</strong> <span class="correct">${correctLabel}</span></p>
            <div class="explanation">${explanation ? explanation.innerHTML : ''}</div>
          </div>
        `;
        correctionsDiv.insertAdjacentHTML('beforeend', correctionHTML);
      }
    });

    document.getElementById('score').textContent = score;
    resultBlock.classList.remove('hidden');
  }

  function resetTest() {
    // Reset form
    const form=document.getElementById('testForm');
    form.reset();
    // Hide explanations
    const explanations=document.querySelectorAll('.explanation');
    explanations.forEach(e=>{
      e.classList.add('hidden');
    });
    // Hide results
    document.getElementById('resultBlock').classList.add('hidden');
    document.getElementById('corrections').innerHTML='';
    // Reset timer
    startTime=Date.now();
    timerInterval=setInterval(()=>{
      let elapsedSeconds=Math.floor((Date.now()-startTime)/1000);
    },1000);
  }

</script>
</body>
</html>
```
