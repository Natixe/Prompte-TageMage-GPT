Raisonner **Contexte et objectif :**

Tu es un expert en préparation au Tage Mage, le test d’admission aux écoles de commerce. 

Ta mission est de concevoir un test blanc complet de 60 question, interactif dans un formulaire HTML unique (incluant HTML, CSS et JavaScript) afin de permettre aux candidats de s’entraîner dans des conditions proches de l’examen officiel du TageMage.

Caractéristiques principales :

  1. Un seul fichier (HTML, CSS et JS combinés).
  2. Design minimaliste, responsive, et ergonomique (adapté mobiles / tablettes / PC).
  3. Clarté, facilité d’utilisation et fiabilité.

---

### **Catégories à inclure (6 au total) :**

1. **Compréhension de texte**  
   - Chaque question doit être accompagnée du texte complet (ou d’un extrait cohérent, intégral et autonome) nécessaire pour répondre.
   - Énoncés de textes exigeants, suivis de questions d’inférences ou de synthèse.  
   - Questions locales (analyse d’un paragraphe ou d’une phrase précise).
   - Questions globales (analyse portant sur l’intégralité du texte).
   - Insérer des textes plus longs et plus pointus pour certaine question.
   - Aucune référence externe ou texte incomplet ne doit être fourni : tout le texte utile à la question doit être directement inclus.

2. **Expression**  
   - Analyse de textes complexes avec questions de synonymie, antonymie, correction linguistique et cohérence.  
   - Exemples de sous-compétences à évaluer :  
     - **Synonymie** : trouver la meilleure reformulation d’un passage.  
     - **Correction linguistique** : repérage des fautes d’orthographe, évaluation de la grammaire et du style.  
     - **Cohérence** : construction de phrases complexes, maniement des adverbes/conjonctions, organisation logique.

3. **Calcul**  
   - Problèmes mathématiques d’arithmétique, de géométrie et d’algèbre, de niveau collège.  
   - Utilisation d’identités remarquables, de produits en croix ou de mises en équations.  
   - Évaluer la capacité à modéliser un problème en langage mathématique et à le résoudre.

4. **Conditions minimales**  
   - Énigmes de raisonnement logique, requérant une analyse approfondie de conditions à respecter pour résoudre un problème.

5. **Raisonnement et argumentation**  
   - Questions inspirées de situations de la vie quotidienne ou de médias.  
   - Nécessite un raisonnement naturel : logique et jugement.  
   - Peut inclure des questions combinatoires, d’arrangements spécifiques, de suites logiques, etc.

6. **Logique**  
   - Informations spatiales, numériques et alphabétiques.  
   - Divisée en 3 sous-thèmes :  
     1. **Logique numérique** (3 questions)  
     2. **Logique alphabétique** (3 questions)  
     3. **Logique graphique** (4 questions)
         Matrices : Compléter des suites logiques sous forme de matrices.
   - Vise à mesurer la rapidité de compréhension et d’analyse, la gestion du temps et la résistance au stress.

> **Remarque :**  
> Certaines questions peuvent s’appuyer sur des annales officielles du Tage Mage. Dans ce cas, inclure le texte complet dans le code, plutôt qu’une référence externe, afin que l’utilisateur puisse tout lire dans l’interface.

---

### **Détails de conception et fonctionnalités détaillées attendues :**

### 1. **Structure et contenu du formulaire**  
   - **60 questions** au total, **10 par catégorie** (pour les 6 catégories).  
   - Chaque question doit comporter :  
     - Un numéro (ex. Q1, Q2, etc.)  
     - La mention de sa catégorie (Compréhension, Expression, etc).  
     - Un énoncé clair et complet (sans ambiguïté).  
     - **5 options de réponse** (A, B, C, D, E) dont **1 seule est correcte**.  
   - Les réponses correctes doivent exister dans le code source mais rester **masquées** avant la validation.  
   - Pour les éventuelles questions tirées d’annales, inclure directement dans l’énoncé le court extrait ou la référence — mais toujours fournir le texte complet pour permettre la compréhension de la question. (par ex. : « Tage Mage 2019, Test 3, Question 7 »).

---

### 2. **Instructions pour les questions de difficulté et d’authenticité :**
   **Difficulté équilibrée :**
   - Proposer un mélange équilibré de questions **intermédiaires**, **difficiles** et **très difficiles**.  
   - Respecter autant que possible les formats types du Tage Mage.

---

### 3. **Vérification logique et cohérence**  
  - Chaque question doit être **logiquement valide** :  
    - **Une et une seule réponse correcte** par question.  
    - Les affirmations et explications doivent être **cohérentes** et ne pas se contredire.  
    - La bonne réponse doit découler **clairement** de l’énoncé et de la logique.  
    - **Aucun** énoncé ne doit induire un paradoxe ou une absence de solution (éviter les énoncés impossibles à résoudre).  
  - Les **explications** fournies après la validation doivent prouver la cohérence de la question et justifier clairement la solution correcte.

---

### 4. Système de réponses et corrections
  1. **Calcul du score**  
     - **+4 points** pour chaque bonne réponse.  
     - **0 point** pour chaque question non répondue.  
     - **-1 point** pour chaque mauvaise réponse.  
     - Score maximum : **240 points** (basé sur 60 questions × 4 points chacune).
  
  2. **Affichage des corrections**  
     - Après la soumission, pour chaque question **incorrecte** :  
       - Afficher la **réponse choisie** par l’utilisateur.  
       - Afficher la **bonne réponse**.  
       - Fournir une **explication détaillée** (raisonnement, rappel théorique, etc.).  
     - Les réponses **correctes** doivent apparaître en **vert**, les réponses **incorrectes** en **rouge**.
     - Les **explications** (pour toutes les questions) sont présentes dans le code, mais ne doivent être dévoilées qu’une fois la soumission effectuée.

---

### 5. Affichage des résultats
  - Au moment de la **soumission du formulaire** :  
    1. Calculer et afficher le **score final**.  
    2. Lister les **questions incorrectes** avec :  
       - La réponse choisie par l’utilisateur.  
       - La **bonne réponse**.  
       - Une **explication détaillée** (raisonnement, rappel théorique).  
    3. Mettre en forme :  
       - Les réponses **correctes** en vert.  
       - Les réponses **incorrectes** en rouge.  
    4. Les corrections et explications apparaissent **automatiquement sous chaque question incorrecte** après la validation.  
    5. **Masquer toutes les réponses** jusqu’à la fin du test pour éviter tout biais pendant la passation.

---

### 6. **Direction artistique (UI/UX) :**
   - **Minimalisme et clarté** :
     - Les Question :  `#FFCB25`.
     - Fond : `#313338` (gris foncé).
     - Texte : `#FFFFFF` (blanc).
     - Utilisation d’une police moderne sans-serif comme `Roboto`, `Helvetica` ou `Arial`.
   - **Mise en page ergonomique** :
     - Espacements bien définis entre les sections et les questions.
     - Boutons et champs d’entrée épurés avec :
       - Coins légèrement arrondis.
       - Effets au survol (hover) : par exemple, éclaircir légèrement le bouton ou souligner les liens.
   - **Compatibilité mobile** :
     - Le design doit être **responsive**, adapté aux écrans d’ordinateurs, tablettes et smartphones.

---

### 7. **Fonctionnalités techniques :**
   - Implémenter en **HTML**, **CSS** et **JavaScript**.
   - Ajouter une logique JavaScript pour :
     - Valider le formulaire.
     - Calculer dynamiquement les scores.
     - Afficher les résultats et les corrections **sans rechargement de page**.
   - Chronomètre  :
     - Le chronomètre démarre dès l’ouverture du test,
     - Le chronomètre s’arrête à la soumission du test,
     - Afficher le temps final dans les résultats (et l’export PDF).
   - Exportation PDF :
     - Permettre l’export du score, des corrections et du temps final au format PDF.

---

### 8. **Accessibilité :**
   - Veiller à ce que le formulaire soit accessible :
     - Support pour les **lecteurs d’écran**.
     - Contraste suffisant entre le texte et le fond.
   - Navigation fluide au clavier (tabulation, focus visible, etc.).

---

### 9. **Code modulaire et réutilisable :
   - Bien organiser le JavaScript (fonctions pour calculer les scores, gérer l’affichage, etc.).
   - Rassembler la totalité (HTML/CSS/JS) dans un seul fichier tout en restant clair et commenté.

---

### 10. **Clause obligatoire**  
   - 60 questions fournies, avec réponses correctes et explications (en commentaires ou masquées). 
   - Aucune fonctionnalité demandée ci-dessus ne doit être omise : catégories, structure, scoring, corrections, design, chronomètre, export PDF, etc.

---

###  11. **Extension :**
   - Bouton de réinitialisation pour refaire le test, réinitialisant le score, les réponses, le chronomètre et les corrections.

---

### **Livrable attendu :**
- Un **formulaire HTML unique**, intégrant les 60 questions contenant :  
     1. L’**intégralité du code** (HTML, CSS, JavaScript).  
     2. Les **60 questions** (10 par catégorie).  
     3. Tous les aspects (design, scripts, explications, etc.) inclus et fonctionnels.
     4. Les **réponses** et **explications** (commentées ou masquées) correspondant à chaque item.  
     5. Vérification que chaque question est logiquement valide :
         - Exactement une bonne réponse par question,
         - Explications claires et cohérentes,
         - Aucune confusion ou paradoxe dans les énoncés.
     6. Après soumission :  
       - Affichage du **score final** (calculé)
       - Mise en évidence (en rouge) des réponses erronées et (en vert) des bonnes,
       - **Chronomètre final** et option d’export PDF.

---

Voici un exemple de formulaire HTML interactif pour le TageMage les question ne sont pas inclus :

```html,css,js
<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Test de Préparation au Tage Mage</title>
<style>
  body {
    font-family: "Roboto", "Helvetica", "Arial", sans-serif;
    background-color: #313338;
    color: #FFFFFF;
    margin: 0;
    padding: 0;
  }

  h1, h2, h3 {
    color: #FFCB25;
  }

  h1 {
    text-align: center;
    padding: 20px 0;
  }

  .container {
    max-width: 1100px;
    margin: auto;
    padding: 20px;
  }

  .instructions {
    margin-bottom: 20px;
    line-height: 1.5;
  }

  .question-block {
    margin-bottom: 30px;
    padding: 20px;
    background: #3B3D42;
    border-radius: 5px;
  }

  .question-block h2 {
    margin-top: 0;
  }

  .question-block p {
    margin: 10px 0;
  }

  .options label {
    display: block;
    padding: 5px 0;
    cursor: pointer;
  }

  .options input[type="radio"] {
    margin-right: 10px;
  }

  .submit-btn, .reset-btn, .pdf-btn {
    background-color: #FFCB25;
    color: #313338;
    border: none;
    padding: 10px 20px;
    margin: 20px 10px 0 0;
    border-radius: 5px;
    cursor: pointer;
  }

  .submit-btn:hover, .reset-btn:hover, .pdf-btn:hover {
    background-color: #f5be20;
  }

  .result-block {
    margin-top: 40px;
    background: #3B3D42;
    padding: 20px;
    border-radius: 5px;
  }

  .incorrect {
    color: #FF5252;
  }

  .correct {
    color: #4CAF50;
  }

  .explanation {
    margin-top: 10px;
    padding: 10px;
    background: #2D2F33;
    border-radius: 5px;
  }

  .explanation strong {
    color: #FFCB25;
  }

  .hidden {
    display: none;
  }

  /* Responsive */
  @media screen and (max-width: 600px) {
    .submit-btn, .reset-btn, .pdf-btn {
      width: 100%;
      margin-bottom: 10px;
    }
  }
</style>
</head>
<body>

<h1>Test de Préparation au Tage Mage</h1>
<div class="container">
  <div class="instructions">
    <p>Bienvenue sur ce test de préparation au Tage Mage. Vous trouverez 60 questions réparties en 6 catégories : Calcul, Conditions minimales, Expression, Logique, Matrices, et Compréhension. Le niveau de difficulté varie (intermédiaire, difficile, très difficile). Les questions sont inspirées des annales officielles du Tage Mage. Prenez le temps de lire les énoncés et sélectionnez la bonne réponse. Un chronomètre démarre dès le début du test. À la fin, vous pourrez soumettre vos réponses, consulter vos corrections détaillées, votre score, votre temps écoulé et exporter le résultat en PDF.</p>
    <p>Bon courage !</p>
  </div>

  <form id="testForm">
    
    <!-- ========================================= -->
    <!--                CALCUL (9 questions)       -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--          CONDITIONS MINIMALES (8 q)       -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--               EXPRESSION (8 q)            -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--               LOGIQUE (8 q)               -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--               MATRICES (8 q)              -->
    <!-- ========================================= -->

    <!-- ========================================= -->
    <!--            COMPRÉHENSION (9 q)            -->
    <!-- ========================================= -->

  </form>
</div>

<script>
  // Start timer
  let startTime = Date.now();
  let timerInterval = setInterval(() => {
    let elapsedSeconds = Math.floor((Date.now()-startTime)/1000);
  },1000);

  // Correct answers (index-based per question)
  // We'll store correct options as the value index chosen:
  // For questions with confusion, we pick the chosen "correct" as per explanations.
  // Q1 confusion: we choose "2" for demonstration
  const correctAnswers = {
  };

  function submitTest() {
    clearInterval(timerInterval);
    const form = document.getElementById('testForm');
    const resultBlock = document.getElementById('resultBlock');
    const correctionsDiv = document.getElementById('corrections');
    correctionsDiv.innerHTML = '';
    let score=0;

    // Calculate elapsed time
    let endTime=Date.now();
    let elapsedSeconds=Math.floor((endTime - startTime)/1000);
    document.getElementById('elapsedTime').textContent=elapsedSeconds;

    // Get all question-blocks
    const questionBlocks = document.querySelectorAll('.question-block');
    questionBlocks.forEach((block)=>{
      let qNum = block.getAttribute('data-question');
      let radios = block.querySelectorAll('input[type="radio"]');
      let qName = 'q'+qNum;
      let userAnswer=null;
      radios.forEach(r=>{
        if(r.checked) userAnswer=r.value;
      });

      let correct= correctAnswers[qName];
      if(userAnswer===correct) {
        score++;
        // Mark correct if needed
        // We show no explanation if correct
      } else {
        // Incorrect, show explanation and highlight
        let chosenLabel = null;
        let correctLabel = null;
        radios.forEach(r=>{
          if(r.value===userAnswer) chosenLabel=r.parentNode.innerText.trim();
          if(r.value===correct) correctLabel=r.parentNode.innerText.trim();
        });
        
        // Show explanation
        let explanation = block.querySelector('.explanation');
        if(explanation) {
          explanation.classList.remove('hidden');
        }

        // Add correction details:
        let category=block.getAttribute('data-category');
        let correctionHTML = `
          <div style="margin-top:20px;">
            <h3 class="incorrect">Question ${qNum} (${category})</h3>
            <p><strong>Votre réponse :</strong> <span class="incorrect">${chosenLabel ? chosenLabel : "Non répondue"}</span></p>
            <p><strong>Bonne réponse :</strong> <span class="correct">${correctLabel}</span></p>
            <div class="explanation">${explanation ? explanation.innerHTML : ''}</div>
          </div>
        `;
        correctionsDiv.insertAdjacentHTML('beforeend', correctionHTML);
      }
    });

    document.getElementById('score').textContent = score;
    resultBlock.classList.remove('hidden');
  }

  function resetTest() {
    // Reset form
    const form=document.getElementById('testForm');
    form.reset();
    // Hide explanations
    const explanations=document.querySelectorAll('.explanation');
    explanations.forEach(e=>{
      e.classList.add('hidden');
    });
    // Hide results
    document.getElementById('resultBlock').classList.add('hidden');
    document.getElementById('corrections').innerHTML='';
    // Reset timer
    startTime=Date.now();
    timerInterval=setInterval(()=>{
      let elapsedSeconds=Math.floor((Date.now()-startTime)/1000);
    },1000);
  }

</script>
</body>
</html>
```
